<?php

namespace Digipost\Signature\Client\Core\Internal;

use Digipost\Signature\API\XML\Thirdparty\XMLdSig\ObjectXsd;
use Digipost\Signature\API\XML\Thirdparty\XMLdSig\Reference;
use Digipost\Signature\API\XML\Thirdparty\XMLdSig\Signature as XMLSignature;
use Digipost\Signature\API\XML\Thirdparty\XMLdSig\SignatureValue;
use Digipost\Signature\Client\Core\Internal\XML\Marshalling;
use Digipost\Signature\API\XML\Thirdparty\XMLdSig\Manifest;
use Ds\Map;
use Ds\Set;
use SimpleSAML\XMLSec\Signature;

class Signer {

  /** @var XMLDigitalSignatureContext */
  private $context;

  /** @var XMLSignature */
  private $xmlSignature;

  /** @var \DOMElement */
  //private $sigElement;

  //private $signatureIdMap;

  /** @var Signature */
  private $signature;

  function __construct(XMLSignature $xmlSignature) {
    $this->xmlSignature = $xmlSignature;
  }

  public function sign(XMLDigitalSignatureContext $signContext) {
    $this->context = $signContext;
//    $prefix = $signContext->getSignaturePrefix();
    $this->marshal();

    \SimpleSAML\XMLSec\Utils\DOMDocumentFactory::create();

    /*
    $si = $this->xmlSignature->getSignedInfo();
    $sv = $this->xmlSignature->getSignatureValue();
    $refs = [];
    $this->signatureIdMap = new Map();
    $this->signatureIdMap->put($this->xmlSignature->getId(), $this->xmlSignature);
    $this->signatureIdMap->put($si->getId(), $si);
    $siReferences = $si->getReference();

    foreach ($si->getReference() as $reference) {
      $this->signatureIdMap->put($reference->getId(), $reference);
    }
    $objects = new \ArrayIterator($this->xmlSignature->getObject());

    fromObjects:
    while ($objects->valid()) {
      // @var ObjectXsd $object
      $object = $objects->current(); $objects->next();
      $this->signatureIdMap->put($object->getId(), $object);

      $content = new \ArrayIterator($object->getContent());
      while ($content->valid()) {
        do {
          if (!$content->valid()) {
            goto fromObjects; continue;
          }
          $contentObj = $content->current();
          $content->next();
        } while (!($contentObj instanceof Manifest));

        // @var Manifest $manifest
        $manifest = $contentObj;
        $this->signatureIdMap->put($manifest->getId(), $manifest);

        $references = new \ArrayIterator($manifest->getReference());
        while ($references->valid()) {
          // @var Reference $reference
          $reference = $references->current();
          $refs[] = $reference;
          $this->signatureIdMap->put($reference->getId(), $reference);
          $references->next();
        }
      }
    }
    array_merge($refs, $siReferences);
    */

    try {
      $this->context->sign();
      //$sv->value('123456789');
    } catch (\Exception $e) {
      throw $e;
    }

    //$this->localSigElement = $this->sigElement;
    $this->context->validateReference();

    //$this->context->validateReference();
    //$doc = $this->context->getDocument();
    //$si = $doc->saveXML($this->sigElement->parentNode);
    //print $si . "\n";
    //print $doc->saveXML($this->sigElement);
    //print "\n\n\n";
    //print "OKAAAY, ready to do some signing! :) ";
  }

  public function marshal() {
    Marshalling::marshal($this->xmlSignature, $domOutput);
    /** @var \DOMDocument $domOutput */

    $sigElem = $this->context->createXMLSignatureElement($domOutput->documentElement);



//    $ownerDoc = $sigElem->ownerDocument;
//    $newNode = $sigElem->ownerDocument->importNode($domOutput->documentElement);
//    $sigElem->parentNode->appendChild($newNode);
    //$ownerDoc->documentElement->appendChild($sigElem);

    //$newNode =  $ownerDoc->importNode($domOutput->documentElement);
    //$sigElem->parentNode->replaceChild($newNode, $sigElem);
    //$newNode = $ownerDoc->importNode($domOutput->documentElement);
    //$this->sigElement = $sigElem->appendChild($newNode);
  }

  private function digestReference($ref) {

  }
}